/**
 * üìç LOCAL LOCATION REMINDER SERVICE
 * 
 * Servi√ßo para agendar notifica√ß√µes locais que lembram o estudante
 * de actualizar sua localiza√ß√£o a cada 2 horas durante hor√°rio de campus.
 * 
 * Caracter√≠sticas:
 * - Notifica√ß√µes locais (n√£o usa internet)
 * - Hor√°rio: 8h √†s 20h
 * - Intervalo: A cada 2 horas
 * - Silencioso (sem som)
 * - N√£o drena bateria
 */

import { t } from "@/i18n";
import * as Notifications from "expo-notifications";

/**
 * Hor√°rios para enviar lembretes (8h √†s 20h, a cada 2 horas)
 */
const REMINDER_HOURS = [8, 10, 12, 14, 16, 18, 20];

/**
 * Identificador √∫nico para notifica√ß√µes de localiza√ß√£o
 */
const LOCATION_REMINDER_ID_PREFIX = "location-reminder-";

/**
 * Agenda notifica√ß√µes locais di√°rias para lembrar de actualizar localiza√ß√£o
 * 
 * @returns Promise<void>
 */
export async function scheduleLocationReminders(): Promise<void> {
    try {
        // Verifica permiss√µes
        const { status } = await Notifications.getPermissionsAsync();
        if (status !== "granted") {
            console.log("‚ö†Ô∏è Permiss√µes de notifica√ß√£o n√£o concedidas");
            return;
        }

        // Cancela notifica√ß√µes antigas de localiza√ß√£o
        await cancelLocationReminders();

        // Agenda notifica√ß√µes para cada hor√°rio
        for (const hour of REMINDER_HOURS) {
            const identifier = await Notifications.scheduleNotificationAsync({
                content: {
                    title: t("location.reminderTitle"),
                    body: t("location.reminderBody"),
                    data: {
                        type: "location_reminder",
                        hour: hour,
                    },
                    sound: false, // Silencioso
                    priority: Notifications.AndroidNotificationPriority.DEFAULT,
                },
            trigger: {
                type: Notifications.SchedulableTriggerInputTypes.CALENDAR,
                hour: hour,
                minute: 0,
                repeats: true, // Repete diariamente
            },
        });

        console.log(
            `‚úÖ Lembrete agendado para ${hour}:00 (ID: ${identifier})`
        );
    }        console.log(
            `üéâ ${REMINDER_HOURS.length} lembretes de localiza√ß√£o agendados com sucesso!`
        );
    } catch (error) {
        console.error("‚ùå Erro ao agendar lembretes de localiza√ß√£o:", error);
    }
}

/**
 * Cancela todos os lembretes de localiza√ß√£o agendados
 * 
 * @returns Promise<void>
 */
export async function cancelLocationReminders(): Promise<void> {
    try {
        // Busca todas as notifica√ß√µes agendadas
        const scheduledNotifications =
            await Notifications.getAllScheduledNotificationsAsync();

        // Filtra notifica√ß√µes de localiza√ß√£o
        const locationReminders = scheduledNotifications.filter(
            (notification) =>
                notification.content.data?.type === "location_reminder"
        );

        // Cancela cada uma
        for (const notification of locationReminders) {
            await Notifications.cancelScheduledNotificationAsync(
                notification.identifier
            );
        }

        console.log(
            `üóëÔ∏è ${locationReminders.length} lembretes de localiza√ß√£o cancelados`
        );
    } catch (error) {
        console.error("‚ùå Erro ao cancelar lembretes:", error);
    }
}

/**
 * Verifica se lembretes est√£o agendados
 * 
 * @returns Promise<boolean>
 */
export async function areRemindersScheduled(): Promise<boolean> {
    try {
        const scheduledNotifications =
            await Notifications.getAllScheduledNotificationsAsync();

        const locationReminders = scheduledNotifications.filter(
            (notification) =>
                notification.content.data?.type === "location_reminder"
        );

        return locationReminders.length > 0;
    } catch (error) {
        console.error("‚ùå Erro ao verificar lembretes:", error);
        return false;
    }
}

/**
 * Obt√©m contagem de lembretes agendados
 * 
 * @returns Promise<number>
 */
export async function getRemindersCount(): Promise<number> {
    try {
        const scheduledNotifications =
            await Notifications.getAllScheduledNotificationsAsync();

        const locationReminders = scheduledNotifications.filter(
            (notification) =>
                notification.content.data?.type === "location_reminder"
        );

        return locationReminders.length;
    } catch (error) {
        console.error("‚ùå Erro ao contar lembretes:", error);
        return 0;
    }
}

/**
 * Agenda um lembrete √∫nico (one-time) ap√≥s X horas
 * √ötil para lembrar ap√≥s uma actualiza√ß√£o de localiza√ß√£o
 * 
 * @param hoursFromNow - Quantas horas a partir de agora
 * @returns Promise<string> - ID da notifica√ß√£o agendada
 */
export async function scheduleOneTimeReminder(
    hoursFromNow: number = 2
): Promise<string | null> {
    try {
        const { status } = await Notifications.getPermissionsAsync();
        if (status !== "granted") {
            return null;
        }

        const identifier = await Notifications.scheduleNotificationAsync({
            content: {
                title: t("location.reminderOneTimeTitle"),
                body: t("location.reminderOneTimeBody", { hours: hoursFromNow }),
                data: {
                    type: "location_reminder_onetime",
                },
                sound: false,
            },
            trigger: {
                type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,
                seconds: hoursFromNow * 60 * 60, // Converte horas para segundos
            },
        });

        console.log(
            `‚è∞ Lembrete √∫nico agendado para daqui ${hoursFromNow}h (ID: ${identifier})`
        );
        return identifier;
    } catch (error) {
        console.error("‚ùå Erro ao agendar lembrete √∫nico:", error);
        return null;
    }
}

/**
 * Reschedule - √∫til ap√≥s reinstalar app ou actualiza√ß√£o
 * 
 * @returns Promise<void>
 */
export async function rescheduleIfNeeded(): Promise<void> {
    const isScheduled = await areRemindersScheduled();
    
    if (!isScheduled) {
        console.log("üîÑ Reagendando lembretes de localiza√ß√£o...");
        await scheduleLocationReminders();
    } else {
        const count = await getRemindersCount();
        console.log(`‚úÖ ${count} lembretes j√° est√£o agendados`);
    }
}
